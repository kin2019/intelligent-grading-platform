{
  "permissions": {
    "allow": [
      "Bash(curl:*)",
      "Bash(python:*)",
      "Bash(start http://localhost:8000/frontend/subject-detail.html?subject=%E6%95%B0%E5%AD%A6)",
      "Bash(start firefox \"http://localhost:8000/frontend/subject-detail.html?subject=数学\")",
      "Bash(start firefox \"D:\\work\\project\\zyjc\\frontend\\study-plan-create.html\")",
      "Bash(start firefox \"D:\\work\\project\\zyjc\\test_consistency.html\")",
      "Bash(start http://localhost:8000/frontend/study-plan.html)",
      "Bash(pip install:*)",
      "Bash(rm:*)",
      "Bash(start firefox:*)",
      "Bash(del test.db)",
      "Bash(taskkill:*)",
      "Bash(powershell:*)",
      "Bash(start \"http://localhost:8080/frontend/error-detail.html?id=1\")",
      "Bash(start:*)",
      "Bash(dir:*)",
      "Bash(ls:*)",
      "Bash(del:*)",
      "Bash(timeout:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(node:*)",
      "Bash(cmd /c:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git remote:*)",
      "Bash(git push:*)",
      "Bash(git commit:*)",
      "Bash(git fetch:*)",
      "Bash(git config:*)",
      "Bash(ping:*)",
      "Bash(sed:*)",
      "Bash(echo $BACKEND_CORS_ORIGINS)",
      "Bash(where python)",
      "Bash(C:UsersweixiAppDataLocalProgramsPythonPython313python.exe --version)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" update_auth_system.py)",
      "Bash(\"C:\\Users\\weixi\\AppData\\Local\\Microsoft\\WindowsApps\\python.exe\" check_page_access.py)",
      "Bash(\"C:\\Users\\weixi\\AppData\\Local\\Microsoft\\WindowsApps\\python.exe\" fix_all_pages_auth.py)",
      "Bash(\"C:\\Users\\weixi\\AppData\\Local\\Microsoft\\WindowsApps\\python.exe\" --version)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" \"D:\\work\\project\\zyjc\\fix_all_pages_auth.py\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" \"D:\\work\\project\\zyjc\\quick_fix_auth.py\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''app.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT id, name, avatar FROM students WHERE id = 1'')\nresult = cursor.fetchone()\nprint(''Student ID 1:'', result)\ncursor.execute(''SELECT id, name, avatar FROM students LIMIT 5'')\nresults = cursor.fetchall()\nprint(''All students:'')\nfor row in results:\n    print(f''  ID {row[0]}: {row[1]} - avatar: {row[2]}'')\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''app.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\"'')\ntables = cursor.fetchall()\nprint(''Tables:'', tables)\nif tables:\n    cursor.execute(''SELECT id, nickname, avatar_url FROM children LIMIT 5'')\n    results = cursor.fetchall()\n    print(''Children:'')\n    for row in results:\n        print(f''  ID {row[0]}: {row[1]} - avatar: {row[2]}'')\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''app.db'')\ncursor = conn.cursor()\ncursor.execute(''PRAGMA table_info(users)'')\ncolumns = cursor.fetchall()\nprint(''Users table columns:'')\nfor col in columns:\n    print(f''  {col}'')\ncursor.execute(''SELECT id, username, nickname, avatar_url, role FROM users WHERE role=\"\"student\"\" LIMIT 5'')\nresults = cursor.fetchall()\nprint(''\\nStudent users:'')\nfor row in results:\n    print(f''  ID {row[0]}: {row[1]} ({row[2]}) - avatar: {row[3]} - role: {row[4]}'')\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''app.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT id, username, role FROM users WHERE role=\"\"student\"\" LIMIT 5'')\nresults = cursor.fetchall()\nprint(''Student users:'')\nfor row in results:\n    print(f''  ID {row[0]}: {row[1]} - role: {row[2]}'')\nprint()\ncursor.execute(''SELECT id, username, role FROM users WHERE role=\"\"parent\"\" LIMIT 5'')\nresults = cursor.fetchall()\nprint(''Parent users:'')\nfor row in results:\n    print(f''  ID {row[0]}: {row[1]} - role: {row[2]}'')\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''app.db'')\ncursor = conn.cursor()\n\n# 添加avatar_url字段\ntry:\n    cursor.execute(''ALTER TABLE users ADD COLUMN avatar_url VARCHAR(255)'')\n    print(''Successfully added avatar_url column to users table'')\nexcept sqlite3.OperationalError as e:\n    print(f''Column may already exist: {e}'')\n\n# 为ID=1的学生用户设置头像\ncursor.execute(''UPDATE users SET avatar_url = \"\"/uploads/avatars/child1.jpg\"\" WHERE id = 1 AND role = \"\"student\"\"'')\n\n# 检查更新结果\ncursor.execute(''SELECT id, username, role, avatar_url FROM users WHERE id = 1'')\nresult = cursor.fetchone()\nprint(f''Updated user: {result}'')\n\nconn.commit()\nconn.close()\nprint(''Database updated successfully!'')\n\")",
      "Bash(copy:*)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nimport hashlib\nfrom datetime import datetime\n\nconn = sqlite3.connect(''app.db'')\ncursor = conn.cursor()\n\n# 创建家长用户\ntry:\n    # 插入家长用户\n    password_hash = hashlib.sha256(''123456''.encode()).hexdigest()\n    cursor.execute(''''''\n        INSERT INTO users (username, email, password_hash, role, avatar_url) \n        VALUES (?, ?, ?, ?, ?)\n    '''''', (''parent31'', ''parent31@test.com'', password_hash, ''parent'', ''emoji:👨‍👩‍👧‍👦''))\n    parent_id = cursor.lastrowid\n    print(f''Created parent user with ID: {parent_id}'')\n    \n    # 确保student1存在并设置昵称和其他属性\n    cursor.execute(''UPDATE users SET avatar_url = ?, username = ? WHERE id = 1'', \n                   (''/uploads/avatars/child1.jpg'', ''student1''))\n    \n    # 检查ParentChild表是否存在，如果不存在则创建\n    cursor.execute(''''''\n        CREATE TABLE IF NOT EXISTS parent_children (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            parent_id INTEGER NOT NULL,\n            child_id INTEGER NOT NULL,\n            nickname VARCHAR(50),\n            grade VARCHAR(20),\n            school VARCHAR(100),\n            relationship VARCHAR(20) DEFAULT ''child'',\n            is_active BOOLEAN DEFAULT TRUE,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (parent_id) REFERENCES users (id),\n            FOREIGN KEY (child_id) REFERENCES users (id)\n        )\n    '''''')\n    \n    # 创建家长-孩子关系\n    cursor.execute(''''''\n        INSERT INTO parent_children (parent_id, child_id, nickname, grade, school, is_active)\n        VALUES (?, ?, ?, ?, ?, ?)\n    '''''', (parent_id, 1, ''小宝贝'', ''三年级'', ''实验小学'', True))\n    \n    print(''Created parent-child relationship'')\n    \n    conn.commit()\n    \n    # 验证数据\n    cursor.execute(''SELECT * FROM users WHERE role = \"\"parent\"\"'')\n    parents = cursor.fetchall()\n    print(''Parents:'', parents)\n    \n    cursor.execute(''SELECT * FROM parent_children'')\n    relations = cursor.fetchall()\n    print(''Parent-child relations:'', relations)\n    \nexcept Exception as e:\n    print(f''Error: {e}'')\n    conn.rollback()\n\nconn.close()\nprint(''Database setup complete!'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\n\nconn = sqlite3.connect(''app.db'')\ncursor = conn.cursor()\n\n# 重命名表\ncursor.execute(''DROP TABLE IF EXISTS parent_child'')\ncursor.execute(''ALTER TABLE parent_children RENAME TO parent_child'')\n\nprint(''Table renamed successfully'')\n\n# 检查数据\ncursor.execute(''SELECT * FROM parent_child'')\nrelations = cursor.fetchall()\nprint(''Parent-child relations:'', relations)\n\nconn.commit()\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport jwt\nimport datetime\n\n# 使用和后端相同的密钥和算法\nSECRET_KEY = ''your-secret-key-here''\nALGORITHM = ''HS256''\n\n# 为家长用户（ID=2）创建token\npayload = {\n    ''sub'': ''parent_2'',\n    ''user_id'': 2,\n    ''role'': ''parent'',\n    ''iat'': datetime.datetime.utcnow(),\n    ''exp'': datetime.datetime.utcnow() + datetime.timedelta(days=1)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(''Parent token:'', token)\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 使用和后端相同的配置\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\n# 为家长用户（ID=2）创建token，使用与后端一致的格式\npayload = {\n    ''sub'': ''parent_2'',  # 根据后端用法，通常格式为role_id\n    ''exp'': datetime.utcnow() + timedelta(days=1)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(''Parent token:'', token)\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 使用和后端相同的配置\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\n# 为家长用户（ID=2）创建token，仅使用数字ID\npayload = {\n    ''sub'': ''2'',  # 只使用用户ID数字\n    ''exp'': datetime.utcnow() + timedelta(days=1)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(''Parent token with ID 2:'', token)\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/test.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT id, nickname, avatar_url, role FROM users WHERE id = 1'')\nresult = cursor.fetchone()\nif result:\n    print(f''User ID 1 exists: ID={result[0]}, nickname={result[1]}, avatar_url={result[2]}, role={result[3]}'')\nelse:\n    print(''User ID 1 does not exist'')\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== ParentChild关系表 ==='')\ncursor.execute(''''''SELECT pc.id, pc.parent_id, pc.child_id, pc.nickname, pc.is_active, u1.nickname as parent_name, u2.nickname as child_name \n                 FROM parent_child pc \n                 LEFT JOIN users u1 ON pc.parent_id = u1.id \n                 LEFT JOIN users u2 ON pc.child_id = u2.id'''''')\nrelations = cursor.fetchall()\nfor rel in relations:\n    status = ''激活'' if rel[4] else ''已删除''\n    print(f''  关系ID:{rel[0]} 家长:{rel[5]}(ID:{rel[1]}) -> 孩子:{rel[3]}({rel[6]}, ID:{rel[2]}) [{status}]'')\n\nprint(''\\n=== 用户表 ==='')\ncursor.execute(''SELECT id, nickname, role, is_active FROM users ORDER BY id'')\nusers = cursor.fetchall()\nfor user in users:\n    status = ''激活'' if user[3] else ''已删除''\n    print(f''  用户ID:{user[0]} {user[1]} ({user[2]}) [{status}]'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== ParentChild关系表 ==='')\ncursor.execute(''PRAGMA table_info(parent_child)'')\ncolumns = cursor.fetchall()\nprint(''parent_child表结构:'')\nfor col in columns:\n    print(f''  {col[1]} ({col[2]})'')\n\nprint(''\\n=== Users表结构 ==='')\ncursor.execute(''PRAGMA table_info(users)'')\ncolumns = cursor.fetchall()\nprint(''users表结构:'')\nfor col in columns:\n    print(f''  {col[1]} ({col[2]})'')\n\nprint(''\\n=== ParentChild数据 ==='')\ncursor.execute(''SELECT * FROM parent_child LIMIT 10'')\nrelations = cursor.fetchall()\nfor rel in relations:\n    print(f''  {rel}'')\n\nprint(''\\n=== 用户数据 ==='')\ncursor.execute(''SELECT id, username, nickname, role, is_active FROM users LIMIT 10'')\nusers = cursor.fetchall()\nfor user in users:\n    print(f''  {user}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== ParentChild数据 ==='')\ncursor.execute(''SELECT * FROM parent_child'')\nrelations = cursor.fetchall()\nfor rel in relations:\n    status = ''激活'' if rel[7] else ''已删除''\n    print(f''  关系ID:{rel[0]} 家长ID:{rel[1]} -> 孩子ID:{rel[2]} 昵称:{rel[3]} [{status}]'')\n\nprint(''\\n=== 用户数据 ==='')\ncursor.execute(''SELECT id, username, role FROM users'')\nusers = cursor.fetchall()\nfor user in users:\n    print(f''  用户ID:{user[0]} {user[1]} ({user[2]})'')\n\nprint(''\\n=== 当前以角色 parent 的用户ID=2 访问时应该看到的孩子 ==='')\ncursor.execute(''SELECT * FROM parent_child WHERE parent_id = 2 AND is_active = 1'')\nparent_children = cursor.fetchall()\nfor child in parent_children:\n    print(f''  孩子昵称: {child[3]}, 孩子ID: {child[2]}, 年级: {child[4]}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 使用和后端相同的配置\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\n# 为家长用户（ID=2）创建token\npayload = {\n    ''sub'': ''2'',  # 家长用户ID\n    ''exp'': datetime.utcnow() + timedelta(days=1)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(''家长用户Token:'', token)\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 使用和后端相同的配置\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\n# 为家长用户（ID=2）创建token\npayload = {\n    ''sub'': ''2'',  # 家长用户ID\n    ''exp'': datetime.utcnow() + timedelta(days=1)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(''家长用户Token:'', token)\n\")",
      "Bash(http-server:*)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 使用和后端相同的配置\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\n# 为家长用户（ID=2）创建token\npayload = {\n    ''sub'': ''2'',  # 家长用户ID\n    ''exp'': datetime.utcnow() + timedelta(days=1)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(''新的Token:'', token)\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" check_homepage_buttons.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" add_homepage_button.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" verify_homepage_buttons.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查用户ID=2的状态 ==='')\ncursor.execute(''SELECT id, username, role, is_active FROM users WHERE id = 2'')\nuser = cursor.fetchone()\nif user:\n    print(f''用户ID=2: {user}'')\n    if user[2] != ''parent'':\n        print(f''❌ 角色错误: 期望parent，实际{user[2]}'')\n    if not user[3]:\n        print(''❌ 用户已被停用'')\n    if user[2] == ''parent'' and user[3]:\n        print(''✅ 用户状态正常'')\nelse:\n    print(''❌ 用户ID=2不存在'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查users表结构 ==='')\ncursor.execute(''PRAGMA table_info(users)'')\ncolumns = cursor.fetchall()\nfor col in columns:\n    print(f''  {col[1]} ({col[2]})'')\n\nprint(''\\n=== 检查用户ID=2 ==='')\ncursor.execute(''SELECT * FROM users WHERE id = 2'')\nuser = cursor.fetchone()\nif user:\n    print(f''用户ID=2存在: {user}'')\n    cursor.execute(''SELECT id, username, role FROM users WHERE id = 2'')\n    user_info = cursor.fetchone()\n    print(f''ID: {user_info[0]}, 用户名: {user_info[1]}, 角色: {user_info[2]}'')\n    \n    if user_info[2] != ''parent'':\n        print(f''❌ 角色问题: 期望parent，实际是{user_info[2]}'')\n    else:\n        print(''✅ 角色正确: parent'')\nelse:\n    print(''❌ 用户ID=2不存在'')\n\nprint(''\\n=== 检查所有用户 ==='')\ncursor.execute(''SELECT id, username, role FROM users'')\nall_users = cursor.fetchall()\nfor u in all_users:\n    print(f''  ID:{u[0]} {u[1]} ({u[2]})'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''检查用户ID=2:'')\ncursor.execute(''SELECT id, username, role FROM users WHERE id = 2'')\nuser = cursor.fetchone()\nif user:\n    print(f''ID:{user[0]}, 用户名:{user[1]}, 角色:{user[2]}'')\n    if user[2] == ''parent'':\n        print(''角色正确'')\n    else:\n        print(f''角色错误，应该是parent但是{user[2]}'')\nelse:\n    print(''用户ID=2不存在'')\n\nprint(''所有用户:'')\ncursor.execute(''SELECT id, username, role FROM users'')\nusers = cursor.fetchall()\nfor u in users:\n    print(f''ID:{u[0]} {u[1]} {u[2]}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\nimport sqlite3\n\n# JWT配置\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\n# 连接数据库获取用户信息\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT id, username, role, avatar_url FROM users WHERE id = 2'')\nuser = cursor.fetchone()\n\nif user:\n    user_id, username, role, avatar_url = user\n    \n    # 创建完整的token payload\n    payload = {\n        ''sub'': str(user_id),  # 用户ID\n        ''openid'': f''{role}_{user_id}'',  # 生成openid格式\n        ''role'': role,  # 用户角色\n        ''nickname'': username,  # 用户昵称\n        ''vip_type'': ''free'',  # VIP类型，默认免费\n        ''iat'': datetime.utcnow(),\n        ''exp'': datetime.utcnow() + timedelta(days=1)\n    }\n    \n    # 生成token\n    token = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\n    print(f''完整的家长用户Token: {token}'')\n    \n    # 验证token内容\n    decoded = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n    print(f''Token内容: {decoded}'')\nelse:\n    print(''用户ID=2不存在'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查孩子数据 ==='')\ncursor.execute(''SELECT pc.id, pc.child_id, pc.nickname, u.username FROM parent_child pc LEFT JOIN users u ON pc.child_id = u.id WHERE pc.parent_id = 2 AND pc.is_active = 1'')\nchildren = cursor.fetchall()\nif children:\n    print(''找到的孩子数据:'')\n    for child in children:\n        print(f''  关系ID:{child[0]}, 孩子ID:{child[1]}, 昵称:{child[2]}, 用户名:{child[3]}'')\n    print(f''\\n建议的正确访问URL:'')\n    print(f''http://localhost:8080/frontend/child-detail.html?id={children[0][1]}'')\nelse:\n    print(''当前家长(ID=2)没有关联的孩子数据'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== parent_child表结构 ==='')\ncursor.execute(''PRAGMA table_info(parent_child)'')\ncolumns = cursor.fetchall()\nfor col in columns:\n    print(f''  {col[1]} ({col[2]})'')\n\nprint(''\\n=== 示例数据 ==='')\ncursor.execute(''SELECT * FROM parent_child WHERE is_active = 1 LIMIT 3'')\nsample_data = cursor.fetchall()\nfor data in sample_data:\n    print(f''  {data}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 使用和后端相同的配置\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\n# 为家长用户（ID=2）创建token\npayload = {\n    ''sub'': ''2'',  # 家长用户ID\n    ''exp'': datetime.utcnow() + timedelta(days=1)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(''家长用户Token:'', token)\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 家长ID=2关联的孩子 ==='')\ncursor.execute(''SELECT * FROM parent_child WHERE parent_id = 2 AND is_active = 1'')\nchildren = cursor.fetchall()\nfor child in children:\n    print(f''  关系ID:{child[0]}, 家长ID:{child[1]}, 孩子ID:{child[2]}, 昵称:{child[3]}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 用户表 ==='')\ncursor.execute(''SELECT id, username, role, is_active FROM users WHERE id IN (1, 2)'')\nusers = cursor.fetchall()\nfor user in users:\n    print(f''  用户ID:{user[0]}, 用户名:{user[1]}, 角色:{user[2]}, 状态:{user[3]}'')\n\nprint(''\\n=== ParentChild关系 ==='')  \ncursor.execute(''SELECT * FROM parent_child WHERE parent_id = 2 OR child_id = 1'')\nrelations = cursor.fetchall()\nfor rel in relations:\n    print(f''  关系ID:{rel[0]}, 家长ID:{rel[1]}, 孩子ID:{rel[2]}, 昵称:{rel[3]}, 激活:{rel[7]}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 用户表结构 ==='')\ncursor.execute(''PRAGMA table_info(users)'')\ncolumns = cursor.fetchall()\nfor col in columns:\n    print(f''  {col[1]} ({col[2]})'')\n\nprint(''\\n=== 用户数据 ==='')\ncursor.execute(''SELECT id, username, role FROM users WHERE id IN (1, 2)'')\nusers = cursor.fetchall()\nfor user in users:\n    print(f''  用户ID:{user[0]}, 用户名:{user[1]}, 角色:{user[2]}'')\n\nprint(''\\n=== ParentChild关系 ==='')  \ncursor.execute(''SELECT * FROM parent_child WHERE parent_id = 2 OR child_id = 1'')\nrelations = cursor.fetchall()\nfor rel in relations:\n    print(f''  关系ID:{rel[0]}, 家长ID:{rel[1]}, 孩子ID:{rel[2]}, 昵称:{rel[3]}, 激活:{rel[7]}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查用户表中是否有ID=110的用户 ==='')\ncursor.execute(''SELECT id, username, role, nickname, avatar_url, is_active FROM users WHERE id = 110'')\nuser = cursor.fetchone()\nif user:\n    print(f''找到用户ID=110: {user}'')\nelse:\n    print(''用户ID=110不存在'')\n\nprint(''\\n=== 检查parent_child表中是否有child_id=110 ==='')\ncursor.execute(''SELECT * FROM parent_child WHERE child_id = 110'')\nrelation = cursor.fetchone()\nif relation:\n    print(f''找到关联关系: {relation}'')\nelse:\n    print(''没有找到child_id=110的关联关系'')\n\nprint(''\\n=== 检查用户表中最大的ID ==='')\ncursor.execute(''SELECT MAX(id) FROM users'')\nmax_id = cursor.fetchone()[0]\nprint(f''用户表中最大ID: {max_id}'')\n\nprint(''\\n=== 检查parent_child表中的所有child_id ==='')\ncursor.execute(''SELECT DISTINCT child_id FROM parent_child ORDER BY child_id'')\nchild_ids = cursor.fetchall()\nprint(f''parent_child表中的child_id: {[c[0] for c in child_ids]}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查users表结构 ==='')\ncursor.execute(''PRAGMA table_info(users)'')\ncolumns = cursor.fetchall()\nprint(''users表字段:'')\nfor col in columns:\n    print(f''  {col[1]} ({col[2]})'')\n\nprint(''\\n=== 检查用户表中是否有ID=110的用户 ==='')\ncursor.execute(''SELECT * FROM users WHERE id = 110'')\nuser = cursor.fetchone()\nif user:\n    print(f''找到用户ID=110: {user}'')\nelse:\n    print(''用户ID=110不存在'')\n\nprint(''\\n=== 检查用户表中最大的ID ==='')\ncursor.execute(''SELECT MAX(id) FROM users'')\nmax_id = cursor.fetchone()[0]\nprint(f''用户表中最大ID: {max_id}'')\n\nprint(''\\n=== 列出所有用户 ==='')\ncursor.execute(''SELECT id, username, role FROM users ORDER BY id'')\nall_users = cursor.fetchall()\nfor user in all_users[:10]:  # 只显示前10个\n    print(f''  ID:{user[0]} {user[1]} ({user[2]})'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查parent_child表结构 ==='')\ncursor.execute(''PRAGMA table_info(parent_child)'')\ncolumns = cursor.fetchall()\nprint(''parent_child表字段:'')\nfor col in columns:\n    print(f''  {col[1]} ({col[2]})'')\n\nprint(''\\n=== 检查parent_child表中的所有数据 ==='')\ncursor.execute(''SELECT * FROM parent_child'')\nrelations = cursor.fetchall()\nif relations:\n    for rel in relations:\n        print(f''关系ID:{rel[0]}, 家长ID:{rel[1]}, 孩子ID:{rel[2]}, 昵称:{rel[3]}, 激活状态:{rel[7]}'')\nelse:\n    print(''parent_child表中没有数据'')\n\nprint(''\\n=== 检查有效的孩子ID (is_active=1) ==='')\ncursor.execute(''SELECT child_id, nickname FROM parent_child WHERE is_active = 1'')\nactive_children = cursor.fetchall()\nif active_children:\n    print(''可用的孩子ID:'')\n    for child in active_children:\n        print(f''  孩子ID: {child[0]}, 昵称: {child[1]}'')\nelse:\n    print(''没有有效的孩子数据'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 使用和后端相同的配置\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\n# 为家长用户（ID=2）创建token\npayload = {\n    ''sub'': ''2'',  # 家长用户ID\n    ''exp'': datetime.utcnow() + timedelta(days=1)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 详细检查parent_child表数据 ==='')\ncursor.execute(''SELECT * FROM parent_child WHERE is_active = 1'')\nrelations = cursor.fetchall()\nfor rel in relations:\n    print(f''ID:{rel[0]}, 家长ID:{rel[1]}, 孩子ID:{rel[2]}, 昵称:{rel[3]}, 激活:{rel[7]}'')\n\nprint(''\\n=== 检查用户表 ==='')\ncursor.execute(''SELECT id, role FROM users WHERE id IN (1, 2)'')\nusers = cursor.fetchall()\nfor user in users:\n    print(f''用户ID:{user[0]}, 角色:{user[1]}'')\n\nprint(''\\n=== 检查JWT token解析 ==='')\n# 验证我们的token是否正确解析\nfrom jose import jwt\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\ntoken = ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyIiwiZXhwIjoxNzU2NDc0MTA2fQ.LuylcjzvyN-8XbrMch5LTGixOePw_OO4jgqWXWHBcXM''\ntry:\n    decoded = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n    print(f''Token解析成功: {decoded}'')\n    print(f''用户ID: {decoded.get(\"\"sub\"\")}'')\nexcept Exception as e:\n    print(f''Token解析失败: {e}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" debug_child_info.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查所有用户（包括ID>10的） ==='')\ncursor.execute(''SELECT id, role, avatar_url FROM users ORDER BY id'')\nusers = cursor.fetchall()\nfor user in users:\n    print(f''用户ID:{user[0]}, 角色:{user[1]}, 头像:{user[2]}'')\n\nprint(''\\n=== 检查所有parent_child关系 ==='')\ncursor.execute(''SELECT id, parent_id, child_id, nickname, is_active FROM parent_child ORDER BY id'')\nrelations = cursor.fetchall()\nfor rel in relations:\n    print(f''关系ID:{rel[0]}, 家长ID:{rel[1]}, 孩子ID:{rel[2]}, 昵称:{rel[3]}, 激活:{rel[4]}'')\n\nprint(''\\n=== 查找ID=110的用户 ==='')\ncursor.execute(''SELECT * FROM users WHERE id = 110'')\nuser110 = cursor.fetchone()\nif user110:\n    print(f''找到用户ID=110: {user110}'')\nelse:\n    print(''用户ID=110不存在'')\n\nprint(''\\n=== 查找child_id=110的关系 ==='')\ncursor.execute(''SELECT * FROM parent_child WHERE child_id = 110'')\nrel110 = cursor.fetchone()\nif rel110:\n    print(f''找到关系child_id=110: {rel110}'')\nelse:\n    print(''关系child_id=110不存在'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查所有用户ID ==='')\ncursor.execute(''SELECT id, role FROM users ORDER BY id'')\nusers = cursor.fetchall()\nfor user in users:\n    print(f''用户ID:{user[0]}, 角色:{user[1]}'')\n\nprint(''\\n=== 检查所有parent_child关系 ==='')\ncursor.execute(''SELECT id, parent_id, child_id, nickname, is_active FROM parent_child ORDER BY id'')\nrelations = cursor.fetchall()\nfor rel in relations:\n    print(f''关系ID:{rel[0]}, 家长ID:{rel[1]}, 孩子ID:{rel[2]}, 昵称:{rel[3]}, 激活:{rel[4]}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nimport json\n\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 查找可能的模拟数据 ==='')\n# 检查是否有其他表存储了模拟数据\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\"'')\ntables = cursor.fetchall()\nprint(''数据库中的所有表:'')\nfor table in tables:\n    print(f''  {table[0]}'')\n\nprint(''\\n=== 检查是否有ID=110的数据在任何表中 ==='')\nfor table_name in [''users'', ''parent_child'']:\n    try:\n        cursor.execute(f''SELECT * FROM {table_name[0]} WHERE id = 110 OR child_id = 110 OR parent_id = 110'')\n        results = cursor.fetchall()\n        if results:\n            print(f''{table_name[0]}表中找到ID=110相关数据: {len(results)}条'')\n    except Exception as e:\n        print(f''查询{table_name[0]}表时出错: {e}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\n\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查是否有ID=110的数据在任何表中 ==='')\nfor table_name in [''users'', ''parent_child'']:\n    try:\n        if table_name == ''users'':\n            cursor.execute(''SELECT * FROM users WHERE id = 110'')\n        elif table_name == ''parent_child'':\n            cursor.execute(''SELECT * FROM parent_child WHERE id = 110 OR child_id = 110 OR parent_id = 110'')\n        results = cursor.fetchall()\n        if results:\n            print(f''{table_name}表中找到ID=110相关数据: {len(results)}条'')\n            for result in results:\n                print(f''  {result}'')\n        else:\n            print(f''{table_name}表中没有找到ID=110相关数据'')\n    except Exception as e:\n        print(f''查询{table_name}表时出错: {e}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" debug_api_direct.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 最新的数据库状态 ==='')\n\n# 检查所有用户，看看是否现在有ID=110了\ncursor.execute(''SELECT id, role FROM users ORDER BY id'')\nusers = cursor.fetchall()\nprint(f''用户总数: {len(users)}'')\nfor user in users[-10:]:  # 显示最新的10个用户\n    print(f''  用户ID:{user[0]}, 角色:{user[1]}'')\n\n# 检查parent_child关系\ncursor.execute(''SELECT id, parent_id, child_id, nickname, is_active FROM parent_child ORDER BY id'')\nrelations = cursor.fetchall()\nprint(f''\\n关系总数: {len(relations)}'')\nfor rel in relations[-5:]:  # 显示最新的5个关系\n    print(f''  关系ID:{rel[0]}, 家长ID:{rel[1]}, 孩子ID:{rel[2]}, 昵称:{rel[3]}, 激活:{rel[4]}'')\n\n# 特别检查ID=110的数据\nprint(''\\n=== 检查ID=110的具体数据 ==='')\ncursor.execute(''SELECT * FROM users WHERE id = 110'')\nuser110 = cursor.fetchone()\nif user110:\n    print(f''用户ID=110存在: 角色={user110[6]}'')\nelse:\n    print(''用户ID=110不存在'')\n\ncursor.execute(''SELECT * FROM parent_child WHERE child_id = 110'')\nrel110 = cursor.fetchone()\nif rel110:\n    print(f''关系child_id=110存在: 家长ID={rel110[1]}, 昵称={rel110[3]}'')\nelse:\n    print(''关系child_id=110不存在'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nimport os\n\ndb_files = [''backend/app.db'', ''backend/test.db'', ''backend/zyjc_platform.db'']\n\nfor db_file in db_files:\n    if not os.path.exists(db_file):\n        print(f''{db_file} 不存在'')\n        continue\n        \n    print(f''\\n=== 检查 {db_file} ==='')\n    try:\n        conn = sqlite3.connect(db_file)\n        cursor = conn.cursor()\n        \n        # 检查用户总数\n        cursor.execute(''SELECT COUNT(*) FROM users'')\n        user_count = cursor.fetchone()[0]\n        print(f''用户总数: {user_count}'')\n        \n        # 检查是否有ID=110\n        cursor.execute(''SELECT id, role FROM users WHERE id = 110'')\n        user110 = cursor.fetchone()\n        if user110:\n            print(f''✅ 找到用户ID=110: 角色={user110[1]}'')\n        else:\n            print(''❌ 用户ID=110不存在'')\n        \n        # 检查关系总数\n        try:\n            cursor.execute(''SELECT COUNT(*) FROM parent_child'')\n            rel_count = cursor.fetchone()[0]\n            print(f''关系总数: {rel_count}'')\n            \n            cursor.execute(''SELECT parent_id, child_id, nickname FROM parent_child WHERE child_id = 110'')\n            rel110 = cursor.fetchone()\n            if rel110:\n                print(f''✅ 找到关系child_id=110: 家长ID={rel110[0]}, 昵称={rel110[2]}'')\n            else:\n                print(''❌ 关系child_id=110不存在'')\n        except:\n            print(''parent_child表不存在'')\n        \n        conn.close()\n    except Exception as e:\n        print(f''检查{db_file}时出错: {e}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\n\nprint(''=== 检查 backend/test.db ==='')\nconn = sqlite3.connect(''backend/test.db'')\ncursor = conn.cursor()\n\n# 检查用户总数\ncursor.execute(''SELECT COUNT(*) FROM users'')\nuser_count = cursor.fetchone()[0]\nprint(f''用户总数: {user_count}'')\n\n# 检查是否有ID=110\ncursor.execute(''SELECT id, role FROM users WHERE id = 110'')\nuser110 = cursor.fetchone()\nif user110:\n    print(f''找到用户ID=110: 角色={user110[1]}'')\nelse:\n    print(''用户ID=110不存在'')\n\n# 检查最新的用户ID\ncursor.execute(''SELECT id, role FROM users ORDER BY id DESC LIMIT 10'')\nrecent_users = cursor.fetchall()\nprint(''最新的10个用户:'')\nfor user in recent_users:\n    print(f''  用户ID:{user[0]}, 角色:{user[1]}'')\n\n# 检查关系\ncursor.execute(''SELECT parent_id, child_id, nickname FROM parent_child WHERE child_id = 110'')\nrel110 = cursor.fetchone()\nif rel110:\n    print(f''找到关系child_id=110: 家长ID={rel110[0]}, 昵称={rel110[2]}'')\nelse:\n    print(''关系child_id=110不存在'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\n\nconn = sqlite3.connect(''backend/test.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查test.db中的家长ID=2 ==='')\ncursor.execute(''SELECT id, role FROM users WHERE id = 2'')\nuser2 = cursor.fetchone()\nif user2:\n    print(f''用户ID=2存在: 角色={user2[1]}'')\nelse:\n    print(''用户ID=2不存在'')\n\nprint(''\\n=== 检查家长ID=2的所有关联关系 ==='')\ncursor.execute(''SELECT child_id, nickname FROM parent_child WHERE parent_id = 2 AND is_active = 1'')\nchildren = cursor.fetchall()\nprint(f''家长ID=2关联的孩子数量: {len(children)}'')\nfor child in children:\n    print(f''  孩子ID:{child[0]}, 昵称:{child[1]}'')\n\nprint(''\\n=== 检查孩子ID=1的情况 ==='')\ncursor.execute(''SELECT id, role FROM users WHERE id = 1'')\nuser1 = cursor.fetchone()\nif user1:\n    print(f''用户ID=1存在: 角色={user1[1]}'')\n    \n    cursor.execute(''SELECT parent_id, nickname FROM parent_child WHERE child_id = 1 AND is_active = 1'')\n    parent1 = cursor.fetchone()\n    if parent1:\n        print(f''  关联的家长ID:{parent1[0]}, 昵称:{parent1[1]}'')\n    else:\n        print(''  没有找到关联的家长'')\nelse:\n    print(''用户ID=1不存在'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nimport hashlib\nfrom datetime import datetime\n\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\ntry:\n    # 创建孩子用户ID=110\n    print(''=== 创建孩子用户ID=110 ==='')\n    cursor.execute(''SELECT id FROM users WHERE id = 110'')\n    existing_user = cursor.fetchone()\n    \n    if not existing_user:\n        cursor.execute(''''''\n            INSERT INTO users (id, openid, unionid, nickname, role, grade, avatar_url, is_active, daily_quota, daily_used) \n            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n        '''''', (110, ''child_110'', ''mock_openid_child_110'', ''小明'', ''student'', ''二年级'', ''emoji:🎓'', 1, 5, 0))\n        print(''✅ 创建孩子用户ID=110成功'')\n    else:\n        print(''⚠️  用户ID=110已存在'')\n    \n    # 创建家长-孩子关联关系\n    print(''=== 创建家长-孩子关联关系 ==='')\n    cursor.execute(''SELECT id FROM parent_child WHERE parent_id = 2 AND child_id = 110'')\n    existing_relation = cursor.fetchone()\n    \n    if not existing_relation:\n        cursor.execute(''''''\n            INSERT INTO parent_child (parent_id, child_id, nickname, grade, school, relationship_type, is_active) \n            VALUES (?, ?, ?, ?, ?, ?, ?)\n        '''''', (2, 110, ''小明'', ''二年级'', ''实验小学111'', ''parent'', 1))\n        print(''✅ 创建关联关系成功'')\n    else:\n        print(''⚠️  关联关系已存在'')\n    \n    conn.commit()\n    \n    # 验证数据\n    print(''\\n=== 验证创建的数据 ==='')\n    cursor.execute(''SELECT id, nickname, role, grade FROM users WHERE id = 110'')\n    user = cursor.fetchone()\n    if user:\n        print(f''用户ID=110: 昵称={user[1]}, 角色={user[2]}, 年级={user[3]}'')\n    \n    cursor.execute(''SELECT parent_id, child_id, nickname, school FROM parent_child WHERE child_id = 110'')\n    relation = cursor.fetchone()\n    if relation:\n        print(f''关联关系: 家长ID={relation[0]}, 孩子ID={relation[1]}, 昵称={relation[2]}, 学校={relation[3]}'')\n    \n    print(''\\n✅ 数据迁移完成！'')\n    \nexcept Exception as e:\n    print(f''❌ 创建数据时出错: {e}'')\n    conn.rollback()\n    \nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\n\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查users表结构 ==='')\ncursor.execute(''PRAGMA table_info(users)'')\ncolumns = cursor.fetchall()\nfor col in columns:\n    print(f''  {col[1]} ({col[2]})'')\n\nprint(''\\n=== 检查parent_child表结构 ==='')\ncursor.execute(''PRAGMA table_info(parent_child)'')\ncolumns = cursor.fetchall()\nfor col in columns:\n    print(f''  {col[1]} ({col[2]})'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nimport hashlib\nfrom datetime import datetime\n\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\ntry:\n    # 创建孩子用户ID=110\n    print(''=== 创建孩子用户ID=110 ==='')\n    cursor.execute(''SELECT id FROM users WHERE id = 110'')\n    existing_user = cursor.fetchone()\n    \n    if not existing_user:\n        # 生成密码哈希\n        password_hash = hashlib.sha256(''123456''.encode()).hexdigest()\n        \n        cursor.execute(''''''\n            INSERT INTO users (id, username, email, password_hash, role, avatar_url) \n            VALUES (?, ?, ?, ?, ?, ?)\n        '''''', (110, ''xiaoming110'', ''xiaoming110@test.com'', password_hash, ''student'', ''emoji:🎓''))\n        print(''创建孩子用户ID=110成功'')\n    else:\n        print(''用户ID=110已存在'')\n    \n    # 创建家长-孩子关联关系\n    print(''=== 创建家长-孩子关联关系 ==='')\n    cursor.execute(''SELECT id FROM parent_child WHERE parent_id = 2 AND child_id = 110'')\n    existing_relation = cursor.fetchone()\n    \n    if not existing_relation:\n        cursor.execute(''''''\n            INSERT INTO parent_child (parent_id, child_id, nickname, grade, school, relationship, is_active) \n            VALUES (?, ?, ?, ?, ?, ?, ?)\n        '''''', (2, 110, ''小明'', ''二年级'', ''实验小学111'', ''child'', 1))\n        print(''创建关联关系成功'')\n    else:\n        print(''关联关系已存在'')\n    \n    conn.commit()\n    \n    # 验证数据\n    print(''=== 验证创建的数据 ==='')\n    cursor.execute(''SELECT id, username, role FROM users WHERE id = 110'')\n    user = cursor.fetchone()\n    if user:\n        print(f''用户ID=110: 用户名={user[1]}, 角色={user[2]}'')\n    \n    cursor.execute(''SELECT parent_id, child_id, nickname, school FROM parent_child WHERE child_id = 110'')\n    relation = cursor.fetchone()\n    if relation:\n        print(f''关联关系: 家长ID={relation[0]}, 孩子ID={relation[1]}, 昵称={relation[2]}, 学校={relation[3]}'')\n    \n    print(''数据迁移完成！'')\n    \nexcept Exception as e:\n    print(f''创建数据时出错: {e}'')\n    conn.rollback()\n    \nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',  # 家长用户ID\n    ''exp'': datetime.utcnow() + timedelta(days=1)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nfrom datetime import datetime\n\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\ntry:\n    print(''=== 删除并重新创建users表 ==='')\n    \n    # 备份现有数据\n    cursor.execute(''SELECT * FROM users'')\n    existing_users = cursor.fetchall()\n    print(f''备份了{len(existing_users)}个用户'')\n    \n    # 删除表\n    cursor.execute(''DROP TABLE IF EXISTS users'')\n    \n    # 重新创建users表，匹配User模型\n    cursor.execute(''''''\n        CREATE TABLE users (\n            id INTEGER PRIMARY KEY,\n            openid VARCHAR(100) UNIQUE NOT NULL,\n            unionid VARCHAR(100),\n            nickname VARCHAR(100),\n            avatar_url VARCHAR(500),\n            phone VARCHAR(20),\n            email VARCHAR(100),\n            role VARCHAR(20) NOT NULL DEFAULT ''student'',\n            grade VARCHAR(20),\n            is_vip BOOLEAN DEFAULT 0,\n            vip_expire_time DATETIME,\n            daily_quota INTEGER DEFAULT 3,\n            daily_used INTEGER DEFAULT 0,\n            last_quota_reset DATETIME DEFAULT CURRENT_DATE,\n            total_used INTEGER DEFAULT 0,\n            is_active BOOLEAN DEFAULT 1,\n            is_verified BOOLEAN DEFAULT 0,\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            last_login_at DATETIME,\n            settings TEXT\n        )\n    '''''')\n    print(''创建新users表成功'')\n    \n    # 重新插入家长用户ID=2\n    cursor.execute(''''''\n        INSERT INTO users (id, openid, unionid, nickname, role, is_active) \n        VALUES (?, ?, ?, ?, ?, ?)\n    '''''', (2, ''parent_2'', ''union_parent_2'', ''parent31'', ''parent'', 1))\n    print(''重新创建家长用户ID=2'')\n    \n    # 重新插入孩子用户ID=110\n    cursor.execute(''''''\n        INSERT INTO users (id, openid, unionid, nickname, role, grade, avatar_url, is_active) \n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    '''''', (110, ''child_110'', ''union_child_110'', ''小明'', ''student'', ''二年级'', ''emoji:🎓'', 1))\n    print(''重新创建孩子用户ID=110'')\n    \n    conn.commit()\n    print(''表结构更新完成！'')\n    \nexcept Exception as e:\n    print(f''更新表结构时出错: {e}'')\n    conn.rollback()\n    \nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\n\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\ntry:\n    print(''=== 检查parent_child表结构 ==='')\n    cursor.execute(''PRAGMA table_info(parent_child)'')\n    columns = cursor.fetchall()\n    for col in columns:\n        print(f''  {col[1]} ({col[2]})'')\n    \n    print(''\\n=== 备份现有数据 ==='')\n    cursor.execute(''SELECT * FROM parent_child'')\n    existing_data = cursor.fetchall()\n    print(f''备份了{len(existing_data)}条关系数据'')\n    \n    # 删除并重新创建parent_child表\n    cursor.execute(''DROP TABLE IF EXISTS parent_child'')\n    \n    # 创建新的parent_child表，匹配ParentChild模型\n    cursor.execute(''''''\n        CREATE TABLE parent_child (\n            id INTEGER PRIMARY KEY,\n            parent_id INTEGER NOT NULL,\n            child_id INTEGER NOT NULL,\n            relationship_type VARCHAR(20) DEFAULT ''parent'',\n            nickname VARCHAR(50),\n            school VARCHAR(100),\n            class_name VARCHAR(50),\n            is_active BOOLEAN DEFAULT 1,\n            can_view_homework BOOLEAN DEFAULT 1,\n            can_view_reports BOOLEAN DEFAULT 1,\n            can_set_limits BOOLEAN DEFAULT 1,\n            daily_homework_limit INTEGER DEFAULT 10,\n            daily_time_limit INTEGER DEFAULT 120,\n            bedtime_reminder VARCHAR(5),\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (parent_id) REFERENCES users (id),\n            FOREIGN KEY (child_id) REFERENCES users (id)\n        )\n    '''''')\n    print(''创建新parent_child表成功'')\n    \n    # 重新插入关系数据\n    cursor.execute(''''''\n        INSERT INTO parent_child (parent_id, child_id, relationship_type, nickname, school, class_name, is_active) \n        VALUES (?, ?, ?, ?, ?, ?, ?)\n    '''''', (2, 1, ''parent'', ''小宝贝'', ''实验小学'', ''三年级'', 1))\n    print(''重新创建家长ID=2与孩子ID=1的关系'')\n    \n    cursor.execute(''''''\n        INSERT INTO parent_child (parent_id, child_id, relationship_type, nickname, school, class_name, is_active) \n        VALUES (?, ?, ?, ?, ?, ?, ?)\n    '''''', (2, 110, ''parent'', ''小明'', ''实验小学111'', ''二年级'', 1))\n    print(''重新创建家长ID=2与孩子ID=110的关系'')\n    \n    conn.commit()\n    print(''parent_child表更新完成！'')\n    \nexcept Exception as e:\n    print(f''更新parent_child表时出错: {e}'')\n    conn.rollback()\n    \nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\n\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\ntry:\n    # 添加孩子用户ID=1\n    cursor.execute(''''''\n        INSERT INTO users (id, openid, unionid, nickname, role, grade, avatar_url, is_active) \n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    '''''', (1, ''student_1'', ''union_student_1'', ''student1'', ''student'', ''三年级'', ''/uploads/avatars/child1.jpg'', 1))\n    print(''创建孩子用户ID=1成功'')\n    \n    conn.commit()\n    print(''用户创建完成'')\n    \nexcept Exception as e:\n    print(f''创建用户时出错: {e}'')\n    \nconn.close()\n\")",
      "Bash(tasklist:*)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查用户数据 ==='')\ncursor.execute(''SELECT id, role FROM users ORDER BY id'')\nusers = cursor.fetchall()\nfor user in users:\n    print(f''用户ID:{user[0]}, 角色:{user[1]}'')\n\nprint(''\\n=== 检查parent_child关系 ==='')\ncursor.execute(''SELECT id, parent_id, child_id, nickname, is_active FROM parent_child ORDER BY id'')\nrelations = cursor.fetchall()\nfor rel in relations:\n    print(f''关系ID:{rel[0]}, 家长ID:{rel[1]}, 孩子ID:{rel[2]}, 昵称:{rel[3]}, 激活:{rel[4]}'')\n\nprint(''\\n=== 检查家长ID=2与孩子ID=1的关系 ==='')\ncursor.execute(''SELECT * FROM parent_child WHERE parent_id = 2 AND child_id = 1 AND is_active = 1'')\nrel = cursor.fetchone()\nif rel:\n    print(''✅ 关系存在'')\nelse:\n    print(''❌ 关系不存在'')\n\nprint(''\\n=== 检查孩子ID=1用户是否存在 ==='')\ncursor.execute(''SELECT * FROM users WHERE id = 1'')\nuser = cursor.fetchone()\nif user:\n    print(''✅ 用户存在'')\nelse:\n    print(''❌ 用户不存在'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=1)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查用户数据 ==='')\ncursor.execute(''SELECT id, role FROM users ORDER BY id'')\nusers = cursor.fetchall()\nfor user in users:\n    print(f''用户ID:{user[0]}, 角色:{user[1]}'')\n\nprint(''\\n=== 检查parent_child关系 ==='')\ncursor.execute(''SELECT id, parent_id, child_id, nickname, is_active FROM parent_child ORDER BY id'')\nrelations = cursor.fetchall()\nfor rel in relations:\n    print(f''关系ID:{rel[0]}, 家长ID:{rel[1]}, 孩子ID:{rel[2]}, 昵称:{rel[3]}, 激活:{rel[4]}'')\n\nprint(''\\n=== 检查家长ID=2与孩子ID=1的关系 ==='')\ncursor.execute(''SELECT * FROM parent_child WHERE parent_id = 2 AND child_id = 1 AND is_active = 1'')\nrel = cursor.fetchone()\nif rel:\n    print(''关系存在'')\nelse:\n    print(''关系不存在'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime\n\n# 解析当前使用的token\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\ntoken = ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyIiwiZXhwIjoxNzU2NDc2Mzg5fQ.uL14D71Ucfsqgw7tSWccdpRPIkwFe7JG7XWUAoxX7Ps''\n\ntry:\n    decoded = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n    print(''Token解析成功:'')\n    print(f''  用户ID: {decoded.get(\"\"sub\"\")}'')\n    print(f''  过期时间: {datetime.fromtimestamp(decoded.get(\"\"exp\"\"))}'')\n    print(f''  当前时间: {datetime.now()}'')\n    print(f''  是否过期: {datetime.now().timestamp() > decoded.get(\"\"exp\"\")}'')\nexcept Exception as e:\n    print(f''Token解析失败: {e}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nfrom datetime import datetime\nimport hashlib\n\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\ntry:\n    print(''=== 重新创建完整数据库 ==='')\n    \n    # 创建users表\n    cursor.execute(''''''\n        CREATE TABLE users (\n            id INTEGER PRIMARY KEY,\n            openid VARCHAR(100) UNIQUE NOT NULL,\n            unionid VARCHAR(100),\n            nickname VARCHAR(100),\n            avatar_url VARCHAR(500),\n            phone VARCHAR(20),\n            email VARCHAR(100),\n            role VARCHAR(20) NOT NULL DEFAULT ''student'',\n            grade VARCHAR(20),\n            is_vip BOOLEAN DEFAULT 0,\n            vip_expire_time DATETIME,\n            daily_quota INTEGER DEFAULT 3,\n            daily_used INTEGER DEFAULT 0,\n            last_quota_reset DATETIME DEFAULT CURRENT_DATE,\n            total_used INTEGER DEFAULT 0,\n            is_active BOOLEAN DEFAULT 1,\n            is_verified BOOLEAN DEFAULT 0,\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            last_login_at DATETIME,\n            settings TEXT\n        )\n    '''''')\n    print(''✅ 创建users表'')\n    \n    # 创建parent_child表\n    cursor.execute(''''''\n        CREATE TABLE parent_child (\n            id INTEGER PRIMARY KEY,\n            parent_id INTEGER NOT NULL,\n            child_id INTEGER NOT NULL,\n            relationship_type VARCHAR(20) DEFAULT ''parent'',\n            nickname VARCHAR(50),\n            school VARCHAR(100),\n            class_name VARCHAR(50),\n            is_active BOOLEAN DEFAULT 1,\n            can_view_homework BOOLEAN DEFAULT 1,\n            can_view_reports BOOLEAN DEFAULT 1,\n            can_set_limits BOOLEAN DEFAULT 1,\n            daily_homework_limit INTEGER DEFAULT 10,\n            daily_time_limit INTEGER DEFAULT 120,\n            bedtime_reminder VARCHAR(5),\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (parent_id) REFERENCES users (id),\n            FOREIGN KEY (child_id) REFERENCES users (id)\n        )\n    '''''')\n    print(''✅ 创建parent_child表'')\n    \n    # 插入家长用户ID=2\n    cursor.execute(''''''\n        INSERT INTO users (id, openid, unionid, nickname, role, is_active) \n        VALUES (?, ?, ?, ?, ?, ?)\n    '''''', (2, ''parent_2'', ''union_parent_2'', ''parent31'', ''parent'', 1))\n    print(''✅ 创建家长用户ID=2'')\n    \n    # 插入孩子用户ID=1\n    cursor.execute(''''''\n        INSERT INTO users (id, openid, unionid, nickname, role, grade, avatar_url, is_active) \n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    '''''', (1, ''student_1'', ''union_student_1'', ''student1'', ''student'', ''三年级'', ''/uploads/avatars/child1.jpg'', 1))\n    print(''✅ 创建孩子用户ID=1'')\n    \n    # 插入孩子用户ID=110\n    cursor.execute(''''''\n        INSERT INTO users (id, openid, unionid, nickname, role, grade, avatar_url, is_active) \n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    '''''', (110, ''child_110'', ''union_child_110'', ''小明'', ''student'', ''二年级'', ''emoji:🎓'', 1))\n    print(''✅ 创建孩子用户ID=110'')\n    \n    # 插入关联关系\n    cursor.execute(''''''\n        INSERT INTO parent_child (parent_id, child_id, relationship_type, nickname, school, class_name, is_active) \n        VALUES (?, ?, ?, ?, ?, ?, ?)\n    '''''', (2, 1, ''parent'', ''小宝贝'', ''实验小学'', ''三年级'', 1))\n    print(''✅ 创建家长ID=2与孩子ID=1的关系'')\n    \n    cursor.execute(''''''\n        INSERT INTO parent_child (parent_id, child_id, relationship_type, nickname, school, class_name, is_active) \n        VALUES (?, ?, ?, ?, ?, ?, ?)\n    '''''', (2, 110, ''parent'', ''小明'', ''实验小学111'', ''二年级'', 1))\n    print(''✅ 创建家长ID=2与孩子ID=110的关系'')\n    \n    conn.commit()\n    print(''\\n✅ 数据库重新创建完成！'')\n    \n    # 验证数据\n    print(''\\n=== 验证数据 ==='')\n    cursor.execute(''SELECT id, role FROM users'')\n    users = cursor.fetchall()\n    print(''用户列表:'')\n    for user in users:\n        print(f''  ID:{user[0]}, 角色:{user[1]}'')\n    \n    cursor.execute(''SELECT parent_id, child_id, nickname, is_active FROM parent_child'')\n    relations = cursor.fetchall()\n    print(''关联关系:'')\n    for rel in relations:\n        print(f''  家长ID:{rel[0]} -> 孩子ID:{rel[1]}, 昵称:{rel[2]}, 激活:{rel[3]}'')\n        \nexcept Exception as e:\n    print(f''❌ 创建数据库时出错: {e}'')\n    conn.rollback()\n    \nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nfrom datetime import datetime\nimport hashlib\n\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\ntry:\n    print(''=== 重新创建完整数据库 ==='')\n    \n    # 创建users表\n    cursor.execute(''''''\n        CREATE TABLE users (\n            id INTEGER PRIMARY KEY,\n            openid VARCHAR(100) UNIQUE NOT NULL,\n            unionid VARCHAR(100),\n            nickname VARCHAR(100),\n            avatar_url VARCHAR(500),\n            phone VARCHAR(20),\n            email VARCHAR(100),\n            role VARCHAR(20) NOT NULL DEFAULT ''student'',\n            grade VARCHAR(20),\n            is_vip BOOLEAN DEFAULT 0,\n            vip_expire_time DATETIME,\n            daily_quota INTEGER DEFAULT 3,\n            daily_used INTEGER DEFAULT 0,\n            last_quota_reset DATETIME DEFAULT CURRENT_DATE,\n            total_used INTEGER DEFAULT 0,\n            is_active BOOLEAN DEFAULT 1,\n            is_verified BOOLEAN DEFAULT 0,\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            last_login_at DATETIME,\n            settings TEXT\n        )\n    '''''')\n    print(''创建users表成功'')\n    \n    # 创建parent_child表\n    cursor.execute(''''''\n        CREATE TABLE parent_child (\n            id INTEGER PRIMARY KEY,\n            parent_id INTEGER NOT NULL,\n            child_id INTEGER NOT NULL,\n            relationship_type VARCHAR(20) DEFAULT ''parent'',\n            nickname VARCHAR(50),\n            school VARCHAR(100),\n            class_name VARCHAR(50),\n            is_active BOOLEAN DEFAULT 1,\n            can_view_homework BOOLEAN DEFAULT 1,\n            can_view_reports BOOLEAN DEFAULT 1,\n            can_set_limits BOOLEAN DEFAULT 1,\n            daily_homework_limit INTEGER DEFAULT 10,\n            daily_time_limit INTEGER DEFAULT 120,\n            bedtime_reminder VARCHAR(5),\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (parent_id) REFERENCES users (id),\n            FOREIGN KEY (child_id) REFERENCES users (id)\n        )\n    '''''')\n    print(''创建parent_child表成功'')\n    \n    # 插入家长用户ID=2\n    cursor.execute(''''''\n        INSERT INTO users (id, openid, unionid, nickname, role, is_active) \n        VALUES (?, ?, ?, ?, ?, ?)\n    '''''', (2, ''parent_2'', ''union_parent_2'', ''parent31'', ''parent'', 1))\n    print(''创建家长用户ID=2成功'')\n    \n    # 插入孩子用户ID=1\n    cursor.execute(''''''\n        INSERT INTO users (id, openid, unionid, nickname, role, grade, avatar_url, is_active) \n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    '''''', (1, ''student_1'', ''union_student_1'', ''student1'', ''student'', ''三年级'', ''/uploads/avatars/child1.jpg'', 1))\n    print(''创建孩子用户ID=1成功'')\n    \n    # 插入孩子用户ID=110\n    cursor.execute(''''''\n        INSERT INTO users (id, openid, unionid, nickname, role, grade, avatar_url, is_active) \n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    '''''', (110, ''child_110'', ''union_child_110'', ''小明'', ''student'', ''二年级'', ''emoji:🎓'', 1))\n    print(''创建孩子用户ID=110成功'')\n    \n    # 插入关联关系\n    cursor.execute(''''''\n        INSERT INTO parent_child (parent_id, child_id, relationship_type, nickname, school, class_name, is_active) \n        VALUES (?, ?, ?, ?, ?, ?, ?)\n    '''''', (2, 1, ''parent'', ''小宝贝'', ''实验小学'', ''三年级'', 1))\n    print(''创建家长ID=2与孩子ID=1的关系成功'')\n    \n    cursor.execute(''''''\n        INSERT INTO parent_child (parent_id, child_id, relationship_type, nickname, school, class_name, is_active) \n        VALUES (?, ?, ?, ?, ?, ?, ?)\n    '''''', (2, 110, ''parent'', ''小明'', ''实验小学111'', ''二年级'', 1))\n    print(''创建家长ID=2与孩子ID=110的关系成功'')\n    \n    conn.commit()\n    print(''数据库重新创建完成！'')\n    \n    # 验证数据\n    print(''=== 验证数据 ==='')\n    cursor.execute(''SELECT id, role FROM users'')\n    users = cursor.fetchall()\n    print(''用户列表:'')\n    for user in users:\n        print(f''  ID:{user[0]}, 角色:{user[1]}'')\n    \n    cursor.execute(''SELECT parent_id, child_id, nickname, is_active FROM parent_child'')\n    relations = cursor.fetchall()\n    print(''关联关系:'')\n    for rel in relations:\n        print(f''  家长ID:{rel[0]} -> 孩子ID:{rel[1]}, 昵称:{rel[2]}, 激活:{rel[3]}'')\n        \nexcept Exception as e:\n    print(f''创建数据库时出错: {e}'')\n    conn.rollback()\n    \nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nfrom datetime import datetime\n\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\ntry:\n    # 创建users表\n    cursor.execute(''''''\n        CREATE TABLE users (\n            id INTEGER PRIMARY KEY,\n            openid VARCHAR(100) UNIQUE NOT NULL,\n            unionid VARCHAR(100),\n            nickname VARCHAR(100),\n            avatar_url VARCHAR(500),\n            phone VARCHAR(20),\n            email VARCHAR(100),\n            role VARCHAR(20) NOT NULL DEFAULT ''student'',\n            grade VARCHAR(20),\n            is_vip BOOLEAN DEFAULT 0,\n            vip_expire_time DATETIME,\n            daily_quota INTEGER DEFAULT 3,\n            daily_used INTEGER DEFAULT 0,\n            last_quota_reset DATETIME DEFAULT CURRENT_DATE,\n            total_used INTEGER DEFAULT 0,\n            is_active BOOLEAN DEFAULT 1,\n            is_verified BOOLEAN DEFAULT 0,\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            last_login_at DATETIME,\n            settings TEXT\n        )\n    '''''')\n    \n    # 创建parent_child表\n    cursor.execute(''''''\n        CREATE TABLE parent_child (\n            id INTEGER PRIMARY KEY,\n            parent_id INTEGER NOT NULL,\n            child_id INTEGER NOT NULL,\n            relationship_type VARCHAR(20) DEFAULT ''parent'',\n            nickname VARCHAR(50),\n            school VARCHAR(100),\n            class_name VARCHAR(50),\n            is_active BOOLEAN DEFAULT 1,\n            can_view_homework BOOLEAN DEFAULT 1,\n            can_view_reports BOOLEAN DEFAULT 1,\n            can_set_limits BOOLEAN DEFAULT 1,\n            daily_homework_limit INTEGER DEFAULT 10,\n            daily_time_limit INTEGER DEFAULT 120,\n            bedtime_reminder VARCHAR(5),\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (parent_id) REFERENCES users (id),\n            FOREIGN KEY (child_id) REFERENCES users (id)\n        )\n    '''''')\n    \n    # 插入数据\n    cursor.execute(''''''INSERT INTO users (id, openid, unionid, nickname, role, is_active) VALUES (?, ?, ?, ?, ?, ?)'''''', (2, ''parent_2'', ''union_parent_2'', ''parent31'', ''parent'', 1))\n    cursor.execute(''''''INSERT INTO users (id, openid, unionid, nickname, role, grade, avatar_url, is_active) VALUES (?, ?, ?, ?, ?, ?, ?, ?)'''''', (1, ''student_1'', ''union_student_1'', ''student1'', ''student'', ''三年级'', ''/uploads/avatars/child1.jpg'', 1))\n    cursor.execute(''''''INSERT INTO users (id, openid, unionid, nickname, role, grade, avatar_url, is_active) VALUES (?, ?, ?, ?, ?, ?, ?, ?)'''''', (110, ''child_110'', ''union_child_110'', ''小明'', ''student'', ''二年级'', ''emoji:🎓'', 1))\n    \n    cursor.execute(''''''INSERT INTO parent_child (parent_id, child_id, relationship_type, nickname, school, class_name, is_active) VALUES (?, ?, ?, ?, ?, ?, ?)'''''', (2, 1, ''parent'', ''小宝贝'', ''实验小学'', ''三年级'', 1))\n    cursor.execute(''''''INSERT INTO parent_child (parent_id, child_id, relationship_type, nickname, school, class_name, is_active) VALUES (?, ?, ?, ?, ?, ?, ?)'''''', (2, 110, ''parent'', ''小明'', ''实验小学111'', ''二年级'', 1))\n    \n    conn.commit()\n    print(''数据库创建成功'')\n    \nexcept Exception as e:\n    print(f''错误: {e}'')\n    conn.rollback()\n    \nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=1)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''当前家长token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查用户ID=2的信息 ==='')\ncursor.execute(''SELECT id, role, is_active FROM users WHERE id = 2'')\nuser2 = cursor.fetchone()\nif user2:\n    print(f''用户ID=2: 角色={user2[1]}, 激活={user2[2]}'')\nelse:\n    print(''用户ID=2不存在'')\n\nprint(''\\n=== 检查用户ID=1的信息 ==='')\ncursor.execute(''SELECT id, role, is_active FROM users WHERE id = 1'')\nuser1 = cursor.fetchone()\nif user1:\n    print(f''用户ID=1: 角色={user1[1]}, 激活={user1[2]}'')\nelse:\n    print(''用户ID=1不存在'')\n\nprint(''\\n=== 检查parent_child关系 ==='')\ncursor.execute(''SELECT parent_id, child_id, nickname, is_active FROM parent_child WHERE parent_id = 2 AND child_id = 1'')\nrelation = cursor.fetchone()\nif relation:\n    print(f''关系存在: 家长ID={relation[0]}, 孩子ID={relation[1]}, 昵称={relation[2]}, 激活={relation[3]}'')\nelse:\n    print(''关系不存在'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成新的家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)  # 延长到7天有效期\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''新的家长token (7天有效): {token}'')\n\n# 验证token\ntry:\n    decoded = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n    print(f''Token验证成功: {decoded}'')\n    exp_time = datetime.fromtimestamp(decoded[''exp''])\n    print(f''过期时间: {exp_time}'')\nexcept Exception as e:\n    print(f''Token验证失败: {e}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成新的家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)  # 延长到7天有效期\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''新的家长token (7天有效): {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成新的家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''新的家长token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查用户ID=1的班级信息 ==='')\ncursor.execute(''SELECT id, parent_id, child_id, nickname, class_name, school FROM parent_child WHERE child_id = 1'')\nrelation = cursor.fetchone()\nif relation:\n    print(f''关联关系: ID={relation[0]}, 家长ID={relation[1]}, 孩子ID={relation[2]}, 昵称={relation[3]}, 班级={relation[4]}, 学校={relation[5]}'')\nelse:\n    print(''未找到child_id=1的关联关系'')\n\n# 如果班级为空，添加班级信息\nif relation and not relation[4]:\n    print(''为孩子ID=1添加班级信息...'')\n    cursor.execute(''UPDATE parent_child SET class_name = ? WHERE child_id = 1'', (''三年级1班'',))\n    conn.commit()\n    print(''班级信息已更新'')\n\n# 再次检查\ncursor.execute(''SELECT id, parent_id, child_id, nickname, class_name, school FROM parent_child WHERE child_id = 1'')\nupdated_relation = cursor.fetchone()\nif updated_relation:\n    print(f''更新后: ID={updated_relation[0]}, 家长ID={updated_relation[1]}, 孩子ID={updated_relation[2]}, 昵称={updated_relation[3]}, 班级={updated_relation[4]}, 学校={updated_relation[5]}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查孩子ID=1的班级信息 ==='')\ncursor.execute(''SELECT class_name FROM parent_child WHERE child_id = 1'')\nresult = cursor.fetchone()\nif result:\n    print(f''当前班级信息: {result[0]}'')\n    if not result[0] or result[0] == ''未设置'':\n        print(''更新班级信息...'')\n        cursor.execute(''UPDATE parent_child SET class_name = ? WHERE child_id = 1'', (''三年级1班'',))\n        conn.commit()\n        print(''班级信息已更新为: 三年级1班'')\nelse:\n    print(''未找到关联关系'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成新的家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''新的家长token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''新的家长token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成新的家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''新的家长token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport requests\n\ntoken = ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyIiwiZXhwIjoxNzU3MDM3NjE2fQ.jjDMfdk_c9aUaBkSVzBWHK0bWCjN98rDOorA72Kn0ys''\n\nurl = ''http://localhost:8000/api/v1/parent/dashboard''\nheaders = {''Authorization'': f''Bearer {token}''}\n\nresponse = requests.get(url, headers=headers)\nif response.status_code == 200:\n    data = response.json()\n    children = data.get(''children'', [])\n    print(f''Total children: {len(children)}'')\n    for i, child in enumerate(children):\n        print(f''Child {i+1}:'')\n        print(f''  ID: {child.get(\"\"id\"\")}'')\n        print(f''  Avatar value: {repr(child.get(\"\"avatar\"\"))}'')  # use repr() to avoid encoding issues\n        if str(child.get(''name'', '''')).find(''aa'') >= 0 or child.get(''id'') == 110:\n            print(''  >>> This is the aa child <<<'')\n        print()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport os\nprint(''当前目录:'', os.getcwd())\nprint(''backend目录是否存在:'', os.path.exists(''D:/work/project/zyjc/backend''))\nprint(''app.main是否存在:'', os.path.exists(''D:/work/project/zyjc/backend/app/main.py''))\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -m uvicorn backend.app.main:app --host 0.0.0.0 --port 8000)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -m uvicorn app.main:app --host 0.0.0.0 --port 8000)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_avatar_update.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查孩子ID=1的头像信息 ==='')\ncursor.execute(''SELECT id, nickname, avatar_url FROM users WHERE id = 1'')\nuser = cursor.fetchone()\nif user:\n    print(f''用户ID=1: 昵称={user[1]}, 头像={user[2][:50] if user[2] else None}...'')\nelse:\n    print(''用户ID=1不存在'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" fix_avatar_update.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" debug_api_issue.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_final_fix.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" debug_frontend_issue.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_final_avatar_fix.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_image_avatar.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_frontend_async.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''当前有效的家长token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport requests\nimport json\n\ntoken = ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyIiwiZXhwIjoxNzU3MDQyMDQ5fQ.NXVct--lzwkTLk3Be6Y8uD_uXYScMqCJRJC2csSMB2Q''\n\ntry:\n    # 获取家长dashboard数据\n    response = requests.get(\n        ''http://localhost:8000/api/v1/parent/dashboard'',\n        headers={''Authorization'': f''Bearer {token}''}\n    )\n    \n    if response.status_code == 200:\n        data = response.json()\n        children = data.get(''children'', [])\n        print(''=== 孩子数据结构分析 ==='')\n        print(f''孩子数量: {len(children)}'')\n        \n        for i, child in enumerate(children):\n            print(f''\\n孩子 {i+1}:'')\n            print(f''  ID: {child.get(\"\"id\"\")}'')\n            print(f''  姓名: {child.get(\"\"name\"\")}'') \n            print(f''  头像: {repr(child.get(\"\"avatar\"\"))}'')\n            print(f''  年级: {child.get(\"\"grade\"\")}'')\n            print(f''  状态: {child.get(\"\"status\"\")}'')\n            print(f''  今日分数: {child.get(\"\"todayScore\"\")}'')\n            print(f''  所有字段: {list(child.keys())}'')\n    else:\n        print(f''API请求失败: {response.status_code}'')\n        print(f''响应内容: {response.text}'')\n        \nexcept Exception as e:\n    print(f''请求异常: {e}'')\n\")",
      "Read(D:\\/**)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''新的家长token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport requests\n\ntoken = ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyIiwiZXhwIjoxNzU3MDQ4NDQwfQ.UXxbs7IVGDXRopDLVz-lwYHdR0CDIoyPEnmxQ2WbkS8''\n\ntry:\n    # 测试VIP状态API\n    response = requests.get(\n        ''http://localhost:8000/api/v1/user/vip-status'',\n        headers={''Authorization'': f''Bearer {token}''}\n    )\n    \n    if response.status_code == 200:\n        data = response.json()\n        print(''VIP状态API测试成功:'')\n        print(f''  是否VIP: {data.get(\"\"is_vip\"\")}'')\n        print(f''  VIP类型: {data.get(\"\"vip_type\"\")}'')\n        print(f''  过期时间: {data.get(\"\"expire_date\"\")}'')\n        print(f''  剩余天数: {data.get(\"\"remaining_days\"\")}'')\n        print(f''  每日额度: {data.get(\"\"daily_quota\"\")}'')\n        print(f''  剩余次数: {data.get(\"\"remaining_quota\"\")}'')\n    else:\n        print(f''API请求失败: {response.status_code}'')\n        print(f''响应内容: {response.text}'')\n        \nexcept Exception as e:\n    print(f''请求异常: {e}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 检查用户ID=2的VIP信息 ==='')\ncursor.execute(''SELECT id, is_vip, vip_expire_time, daily_quota, daily_used FROM users WHERE id = 2'')\nuser = cursor.fetchone()\nif user:\n    print(f''用户ID=2: VIP={user[1]}, 过期时间={user[2]}, 每日额度={user[3]}, 已使用={user[4]}'')\n    remaining = (user[3] or 3) - (user[4] or 0)\n    print(f''计算剩余次数: {user[3]} - {user[4]} = {remaining}'')\nelse:\n    print(''用户ID=2不存在'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nfrom datetime import datetime, timedelta\n\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\n# 给用户ID=2设置VIP状态用于测试\nexpire_time = datetime.now() + timedelta(days=30)  # 30天后过期\ncursor.execute(''UPDATE users SET is_vip = 1, vip_expire_time = ?, daily_quota = 50 WHERE id = 2'', \n               (expire_time.isoformat(),))\n\nconn.commit()\n\n# 验证更新\ncursor.execute(''SELECT id, is_vip, vip_expire_time, daily_quota FROM users WHERE id = 2'')\nuser = cursor.fetchone()\nif user:\n    print(f''用户ID=2更新后: VIP={user[1]}, 过期时间={user[2]}, 每日额度={user[3]}'')\n\nconn.close()\nprint(''已为用户ID=2设置30天VIP状态'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_vip_center.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nfrom datetime import datetime, timedelta\n\nconn = sqlite3.connect(''backend/app.db'')\ncursor = conn.cursor()\n\nprint(''=== 创建两种测试场景 ==='')\n\n# 场景1: 设置为非VIP用户用于测试\ncursor.execute(''UPDATE users SET is_vip = 0, vip_expire_time = NULL, daily_quota = 3, daily_used = 1 WHERE id = 2'')\n\nconn.commit()\n\n# 验证更新\ncursor.execute(''SELECT id, is_vip, vip_expire_time, daily_quota, daily_used FROM users WHERE id = 2'')\nuser = cursor.fetchone()\nif user:\n    remaining = (user[3] or 3) - (user[4] or 0)\n    print(f''非VIP用户测试数据: VIP={user[1]}, 每日额度={user[3]}, 已使用={user[4]}, 剩余={remaining}'')\n\nconn.close()\nprint(''已设置非VIP用户测试场景'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_vip_purchase.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成学生用户token (ID=1)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''1'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''学生用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_vip_navigation.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成学生用户token (ID=1)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''1'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''学生用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成学生用户token (ID=1)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''1'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''学生用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成学生用户token (ID=1)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''1'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''学生用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成学生用户token (ID=1)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''1'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''学生用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成学生用户token (ID=1)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''1'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''学生用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成学生用户token (ID=1)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''1'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''学生用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport requests\n\ntoken = ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZXhwIjoxNzU3MDYzNTkzfQ.KREHMWp1qtNM9o2ImP2kFpI9MpzXsFK9KPQmaW7lPh8''\n\n# 测试学生用户信息API\nprint(''=== 测试学生用户基本信息 ==='')\ntry:\n    response = requests.get(\n        ''http://localhost:8000/api/v1/auth/me'',\n        headers={''Authorization'': f''Bearer {token}''}\n    )\n    \n    if response.status_code == 200:\n        user_data = response.json()\n        print(f''用户ID: {user_data.get(\"\"id\"\")}'')\n        print(f''角色: {user_data.get(\"\"role\"\")}'') \n        print(f''昵称: {user_data.get(\"\"nickname\"\")}'')\n        print(f''VIP状态: {user_data.get(\"\"is_vip\"\")}'')\n    else:\n        print(f''API调用失败: {response.status_code}'')\n        print(f''响应内容: {response.text}'')\n        \nexcept Exception as e:\n    print(f''请求异常: {e}'')\n\nprint()\nprint(''=== 测试学生VIP状态API ==='')\ntry:\n    response = requests.get(\n        ''http://localhost:8000/api/v1/user/vip-status'',\n        headers={''Authorization'': f''Bearer {token}''}\n    )\n    \n    if response.status_code == 200:\n        vip_data = response.json()\n        print(f''VIP状态数据: {vip_data}'')\n    else:\n        print(f''VIP状态API调用失败: {response.status_code}'')\n        print(f''响应内容: {response.text}'')\n        \nexcept Exception as e:\n    print(f''VIP状态请求异常: {e}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -m uvicorn app.main:app --host 0.0.0.0 --port 8001)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport requests\n\ntoken = ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZXhwIjoxNzU3MDYzNTkzfQ.KREHMWp1qtNM9o2ImP2kFpI9MpzXsFK9KPQmaW7lPh8''\n\n# 测试学生用户信息API (使用端口8001)\nprint(''=== 测试学生用户基本信息 ==='')\ntry:\n    response = requests.get(\n        ''http://localhost:8001/api/v1/auth/me'',\n        headers={''Authorization'': f''Bearer {token}''}\n    )\n    \n    if response.status_code == 200:\n        user_data = response.json()\n        print(f''用户ID: {user_data.get(\"\"id\"\")}'')\n        print(f''角色: {user_data.get(\"\"role\"\")}'') \n        print(f''昵称: {user_data.get(\"\"nickname\"\")}'')\n        print(f''VIP状态: {user_data.get(\"\"is_vip\"\")}'')\n        print(f''头像: {user_data.get(\"\"avatar_url\"\")}'')\n        print()\n        print(''学生用户数据正常，现在测试VIP状态API...'')\n    else:\n        print(f''API调用失败: {response.status_code}'')\n        print(f''响应内容: {response.text}'')\n        \nexcept Exception as e:\n    print(f''请求异常: {e}'')\n\n# 测试VIP状态API\nprint()\nprint(''=== 测试学生VIP状态API ==='')\ntry:\n    response = requests.get(\n        ''http://localhost:8001/api/v1/user/vip-status'',\n        headers={''Authorization'': f''Bearer {token}''}\n    )\n    \n    if response.status_code == 200:\n        vip_data = response.json()\n        print(f''VIP状态API响应成功:'')\n        print(f''  是否VIP: {vip_data.get(\"\"is_vip\"\")}'')\n        print(f''  VIP类型: {vip_data.get(\"\"vip_type\"\")}'')\n        print(f''  剩余次数: {vip_data.get(\"\"remaining_quota\"\")}'')\n        print(f''  每日额度: {vip_data.get(\"\"daily_quota\"\")}'')\n        print(''VIP状态API调用成功，会员中心功能正常'')\n    else:\n        print(f''VIP状态API调用失败: {response.status_code}'')\n        print(f''响应内容: {response.text}'')\n        \nexcept Exception as e:\n    print(f''VIP状态请求异常: {e}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_avatar_pages.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" verify_avatar_fix.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" final_verification.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_profile_fix.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\nprint()\nprint(''请在浏览器中打开: http://localhost:8080/frontend/profile.html'')\nprint(''然后在开发者工具控制台中执行:'')\nprint(f''localStorage.setItem(\"\"authToken\"\", \"\"{token}\"\");'')\nprint(''再刷新页面即可正常显示用户资料。'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成学生用户token (ID=1)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''1'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''学生用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成学生用户token (ID=1)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''1'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''学生用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成学生用户token (ID=1)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''1'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''学生用户Token: {token}'')\n\")",
      "Bash(alembic revision:*)",
      "Bash(sqlite3:*)",
      "Bash(cat:*)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_config_service.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_config_simple.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_export_service.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_export_simple.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_management_service.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_exercise_api.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_api_simple.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成学生用户token (ID=1)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''1'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''新的学生用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_debug.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -m uvicorn app.main:app --host 127.0.0.1 --port 8000)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -m uvicorn app.main:app --host 127.0.0.1 --port 8000 --reload)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -m uvicorn app.main:app --host 127.0.0.1 --port 8001)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_vip_system_complete.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" test_vip_simple.py)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 生成家长用户token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''家长用户Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"from app.api.v1.parent import router; print(''parent.py imports successfully'')\")",
      "Read(D:\\/**)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -m py_compile \"D:\\work\\project\\zyjc\\backend\\app\\api\\v1\\parent.py\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# Generate a parent user token (ID=2)\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\npayload = {\n    ''sub'': ''2'',\n    ''exp'': datetime.utcnow() + timedelta(days=7)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(f''Parent user Token: {token}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport requests\nimport time\n\nprint(''=== Testing both endpoints after adding test endpoint ==='')\ntime.sleep(3)  # Give server time to reload\n\n# Test test-endpoint\ntry:\n    response = requests.get(''http://localhost:8000/api/v1/parent/test-endpoint'')\n    print(f''Test endpoint - Status: {response.status_code}, Response: {response.text}'')\nexcept Exception as e:\n    print(f''Test endpoint failed: {e}'')\n\n# Test practice-status with token\ntoken = ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyIiwiZXhwIjoxNzU3MTcyOTM2fQ.etHrIQDEYl02q82jatEuBrXyzt36AjMOqDqDYN292vw''\ntry:\n    response = requests.get(\n        ''http://localhost:8000/api/v1/parent/practice-status'',\n        headers={''Authorization'': f''Bearer {token}''}\n    )\n    print(f''Practice-status - Status: {response.status_code}, Response: {response.text}'')\nexcept Exception as e:\n    print(f''Practice-status failed: {e}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport requests\nimport time\n\nprint(''=== Testing endpoints after main.py modification ==='')\ntime.sleep(3)  # Give server time to reload\n\n# Test test-endpoint  \ntry:\n    response = requests.get(''http://localhost:8000/api/v1/parent/test-endpoint'')\n    print(f''Test endpoint - Status: {response.status_code}'')\n    if response.status_code == 200:\n        print(''SUCCESS: Auto-reload is working!'')\n    else:\n        print(''Still getting 404 - auto-reload issue persists'')\nexcept Exception as e:\n    print(f''Test endpoint failed: {e}'')\n\n# Test practice-status with token\ntoken = ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyIiwiZXhwIjoxNzU3MTcyOTM2fQ.etHrIQDEYl02q82jatEuBrXyzt36AjMOqDqDYN292vw''\ntry:\n    response = requests.get(\n        ''http://localhost:8000/api/v1/parent/practice-status'',\n        headers={''Authorization'': f''Bearer {token}''}\n    )\n    print(f''Practice-status - Status: {response.status_code}'')\n    if response.status_code == 200:\n        print(''SUCCESS: practice-status endpoint is working!'')\nexcept Exception as e:\n    print(f''Practice-status failed: {e}'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport requests\n\ntoken = ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyIiwiZXhwIjoxNzU3MTcyOTM2fQ.etHrIQDEYl02q82jatEuBrXyzt36AjMOqDqDYN292vw''\n\nprint(''=== Testing dashboard endpoint with practice_status parameter ==='')\ntry:\n    response = requests.get(\n        ''http://localhost:8000/api/v1/parent/dashboard?include_practice_status=true'',\n        headers={''Authorization'': f''Bearer {token}''}\n    )\n    \n    print(f''Status Code: {response.status_code}'')\n    \n    if response.status_code == 200:\n        import json\n        data = response.json()\n        \n        # Check if practice_status is included\n        if ''practice_status'' in data:\n            practice_status = data[''practice_status'']\n            print(''SUCCESS: practice_status data is included!'')\n            print(f''Children count: {practice_status.get(\"\"total_children\"\", 0)}'')\n            print(f''Generated at: {practice_status.get(\"\"generated_at\"\", \"\"unknown\"\")}'')\n            \n            # Show first child data if available\n            if practice_status.get(''children'') and len(practice_status[''children'']) > 0:\n                first_child = practice_status[''children''][0]\n                print(f''First child: {first_child.get(\"\"name\"\", \"\"unknown\"\")}'')\n                print(f''Recent practices: {len(first_child.get(\"\"recent_practices\"\", []))}'')\n        else:\n            print(''practice_status key not found in response'')\n            print(f''Available keys: {list(data.keys())}'')\n    else:\n        print(f''Error response: {response.text}'')\n        \nexcept Exception as e:\n    print(f''Request failed: {e}'')\n\")"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "D:\\",
      "D:\\d D:\\work\\project",
      "D:\\d\\work\\project\\zyjc",
      "D:\\d D:\\work\\project\\zyjc",
      "D:\\d\\work\\project\\zyjc\\backend"
    ]
  }
}