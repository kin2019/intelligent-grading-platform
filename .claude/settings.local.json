{
  "permissions": {
    "allow": [
      "Bash(curl:*)",
      "Bash(python:*)",
      "Bash(start http://localhost:8000/frontend/subject-detail.html?subject=%E6%95%B0%E5%AD%A6)",
      "Bash(start firefox \"http://localhost:8000/frontend/subject-detail.html?subject=数学\")",
      "Bash(start firefox \"D:\\work\\project\\zyjc\\frontend\\study-plan-create.html\")",
      "Bash(start firefox \"D:\\work\\project\\zyjc\\test_consistency.html\")",
      "Bash(start http://localhost:8000/frontend/study-plan.html)",
      "Bash(pip install:*)",
      "Bash(rm:*)",
      "Bash(start firefox:*)",
      "Bash(del test.db)",
      "Bash(taskkill:*)",
      "Bash(powershell:*)",
      "Bash(start \"http://localhost:8080/frontend/error-detail.html?id=1\")",
      "Bash(start:*)",
      "Bash(dir:*)",
      "Bash(ls:*)",
      "Bash(del:*)",
      "Bash(timeout:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(node:*)",
      "Bash(cmd /c:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git remote:*)",
      "Bash(git push:*)",
      "Bash(git commit:*)",
      "Bash(git fetch:*)",
      "Bash(git config:*)",
      "Bash(ping:*)",
      "Bash(sed:*)",
      "Bash(echo $BACKEND_CORS_ORIGINS)",
      "Bash(where python)",
      "Bash(C:UsersweixiAppDataLocalProgramsPythonPython313python.exe --version)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" update_auth_system.py)",
      "Bash(\"C:\\Users\\weixi\\AppData\\Local\\Microsoft\\WindowsApps\\python.exe\" check_page_access.py)",
      "Bash(\"C:\\Users\\weixi\\AppData\\Local\\Microsoft\\WindowsApps\\python.exe\" fix_all_pages_auth.py)",
      "Bash(\"C:\\Users\\weixi\\AppData\\Local\\Microsoft\\WindowsApps\\python.exe\" --version)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" \"D:\\work\\project\\zyjc\\fix_all_pages_auth.py\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" \"D:\\work\\project\\zyjc\\quick_fix_auth.py\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''app.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT id, name, avatar FROM students WHERE id = 1'')\nresult = cursor.fetchone()\nprint(''Student ID 1:'', result)\ncursor.execute(''SELECT id, name, avatar FROM students LIMIT 5'')\nresults = cursor.fetchall()\nprint(''All students:'')\nfor row in results:\n    print(f''  ID {row[0]}: {row[1]} - avatar: {row[2]}'')\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''app.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\"'')\ntables = cursor.fetchall()\nprint(''Tables:'', tables)\nif tables:\n    cursor.execute(''SELECT id, nickname, avatar_url FROM children LIMIT 5'')\n    results = cursor.fetchall()\n    print(''Children:'')\n    for row in results:\n        print(f''  ID {row[0]}: {row[1]} - avatar: {row[2]}'')\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''app.db'')\ncursor = conn.cursor()\ncursor.execute(''PRAGMA table_info(users)'')\ncolumns = cursor.fetchall()\nprint(''Users table columns:'')\nfor col in columns:\n    print(f''  {col}'')\ncursor.execute(''SELECT id, username, nickname, avatar_url, role FROM users WHERE role=\"\"student\"\" LIMIT 5'')\nresults = cursor.fetchall()\nprint(''\\nStudent users:'')\nfor row in results:\n    print(f''  ID {row[0]}: {row[1]} ({row[2]}) - avatar: {row[3]} - role: {row[4]}'')\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''app.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT id, username, role FROM users WHERE role=\"\"student\"\" LIMIT 5'')\nresults = cursor.fetchall()\nprint(''Student users:'')\nfor row in results:\n    print(f''  ID {row[0]}: {row[1]} - role: {row[2]}'')\nprint()\ncursor.execute(''SELECT id, username, role FROM users WHERE role=\"\"parent\"\" LIMIT 5'')\nresults = cursor.fetchall()\nprint(''Parent users:'')\nfor row in results:\n    print(f''  ID {row[0]}: {row[1]} - role: {row[2]}'')\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''app.db'')\ncursor = conn.cursor()\n\n# 添加avatar_url字段\ntry:\n    cursor.execute(''ALTER TABLE users ADD COLUMN avatar_url VARCHAR(255)'')\n    print(''Successfully added avatar_url column to users table'')\nexcept sqlite3.OperationalError as e:\n    print(f''Column may already exist: {e}'')\n\n# 为ID=1的学生用户设置头像\ncursor.execute(''UPDATE users SET avatar_url = \"\"/uploads/avatars/child1.jpg\"\" WHERE id = 1 AND role = \"\"student\"\"'')\n\n# 检查更新结果\ncursor.execute(''SELECT id, username, role, avatar_url FROM users WHERE id = 1'')\nresult = cursor.fetchone()\nprint(f''Updated user: {result}'')\n\nconn.commit()\nconn.close()\nprint(''Database updated successfully!'')\n\")",
      "Bash(copy:*)",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\nimport hashlib\nfrom datetime import datetime\n\nconn = sqlite3.connect(''app.db'')\ncursor = conn.cursor()\n\n# 创建家长用户\ntry:\n    # 插入家长用户\n    password_hash = hashlib.sha256(''123456''.encode()).hexdigest()\n    cursor.execute(''''''\n        INSERT INTO users (username, email, password_hash, role, avatar_url) \n        VALUES (?, ?, ?, ?, ?)\n    '''''', (''parent31'', ''parent31@test.com'', password_hash, ''parent'', ''emoji:👨‍👩‍👧‍👦''))\n    parent_id = cursor.lastrowid\n    print(f''Created parent user with ID: {parent_id}'')\n    \n    # 确保student1存在并设置昵称和其他属性\n    cursor.execute(''UPDATE users SET avatar_url = ?, username = ? WHERE id = 1'', \n                   (''/uploads/avatars/child1.jpg'', ''student1''))\n    \n    # 检查ParentChild表是否存在，如果不存在则创建\n    cursor.execute(''''''\n        CREATE TABLE IF NOT EXISTS parent_children (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            parent_id INTEGER NOT NULL,\n            child_id INTEGER NOT NULL,\n            nickname VARCHAR(50),\n            grade VARCHAR(20),\n            school VARCHAR(100),\n            relationship VARCHAR(20) DEFAULT ''child'',\n            is_active BOOLEAN DEFAULT TRUE,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (parent_id) REFERENCES users (id),\n            FOREIGN KEY (child_id) REFERENCES users (id)\n        )\n    '''''')\n    \n    # 创建家长-孩子关系\n    cursor.execute(''''''\n        INSERT INTO parent_children (parent_id, child_id, nickname, grade, school, is_active)\n        VALUES (?, ?, ?, ?, ?, ?)\n    '''''', (parent_id, 1, ''小宝贝'', ''三年级'', ''实验小学'', True))\n    \n    print(''Created parent-child relationship'')\n    \n    conn.commit()\n    \n    # 验证数据\n    cursor.execute(''SELECT * FROM users WHERE role = \"\"parent\"\"'')\n    parents = cursor.fetchall()\n    print(''Parents:'', parents)\n    \n    cursor.execute(''SELECT * FROM parent_children'')\n    relations = cursor.fetchall()\n    print(''Parent-child relations:'', relations)\n    \nexcept Exception as e:\n    print(f''Error: {e}'')\n    conn.rollback()\n\nconn.close()\nprint(''Database setup complete!'')\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport sqlite3\n\nconn = sqlite3.connect(''app.db'')\ncursor = conn.cursor()\n\n# 重命名表\ncursor.execute(''DROP TABLE IF EXISTS parent_child'')\ncursor.execute(''ALTER TABLE parent_children RENAME TO parent_child'')\n\nprint(''Table renamed successfully'')\n\n# 检查数据\ncursor.execute(''SELECT * FROM parent_child'')\nrelations = cursor.fetchall()\nprint(''Parent-child relations:'', relations)\n\nconn.commit()\nconn.close()\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nimport jwt\nimport datetime\n\n# 使用和后端相同的密钥和算法\nSECRET_KEY = ''your-secret-key-here''\nALGORITHM = ''HS256''\n\n# 为家长用户（ID=2）创建token\npayload = {\n    ''sub'': ''parent_2'',\n    ''user_id'': 2,\n    ''role'': ''parent'',\n    ''iat'': datetime.datetime.utcnow(),\n    ''exp'': datetime.datetime.utcnow() + datetime.timedelta(days=1)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(''Parent token:'', token)\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 使用和后端相同的配置\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\n# 为家长用户（ID=2）创建token，使用与后端一致的格式\npayload = {\n    ''sub'': ''parent_2'',  # 根据后端用法，通常格式为role_id\n    ''exp'': datetime.utcnow() + timedelta(days=1)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(''Parent token:'', token)\n\")",
      "Bash(\"C:\\Program Files\\Python311\\python.exe\" -c \"\nfrom jose import jwt\nfrom datetime import datetime, timedelta\n\n# 使用和后端相同的配置\nSECRET_KEY = ''your-super-secret-key-change-in-production''\nALGORITHM = ''HS256''\n\n# 为家长用户（ID=2）创建token，仅使用数字ID\npayload = {\n    ''sub'': ''2'',  # 只使用用户ID数字\n    ''exp'': datetime.utcnow() + timedelta(days=1)\n}\n\ntoken = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)\nprint(''Parent token with ID 2:'', token)\n\")"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "D:\\",
      "D:\\d D:\\work\\project",
      "D:\\d\\work\\project\\zyjc",
      "D:\\d D:\\work\\project\\zyjc"
    ]
  }
}