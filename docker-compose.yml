version: '3.8'

services:
  # PostgreSQL数据库
  db:
    image: postgres:15-alpine
    container_name: zyjc-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-zyjc_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      TZ: Asia/Shanghai
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - zyjc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: zyjc-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - zyjc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # 后端API服务
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: zyjc-backend
    environment:
      # 数据库配置
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-zyjc_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      
      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # 应用配置
      ENVIRONMENT: ${ENVIRONMENT:-development}
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      PORT: 8000
      
      # 微信配置
      WECHAT_APP_ID: ${WECHAT_APP_ID:-your-wechat-app-id}
      WECHAT_APP_SECRET: ${WECHAT_APP_SECRET:-your-wechat-app-secret}
      
      # OCR服务配置
      BAIDU_API_KEY: ${BAIDU_API_KEY:-your-baidu-api-key}
      BAIDU_SECRET_KEY: ${BAIDU_SECRET_KEY:-your-baidu-secret-key}
      
      # AI服务配置
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your-openai-api-key}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    networks:
      - zyjc-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx反向代理（生产环境）
  nginx:
    image: nginx:alpine
    container_name: zyjc-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./backend/static:/var/www/static
    networks:
      - zyjc-network
    depends_on:
      - backend
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  zyjc-network:
    driver: bridge